#pragma once

#ifndef HISTORICALDATA_H
#define HISTORICALDATA_H

#include <vector>
#include <string>
#include "Date.h"

const unsigned int STANDARDRECORDLENGTH = 20;
const unsigned int SIMPLERECORDLENGTH = 6;

class StandardHistoricalRecordUnit
{
	private:
		std::vector<unsigned int> m_record;

	public:
		/*
		enum
		{
			m_stationId = 0,
			m_year = 1,
			m_month = 2,
			m_day = 3,
			m_precipitationFrom20OClockTo20OClock = 4,
			m_localMaximunWindSpeed = 5,
			m_directionOfLocalMaximunWindSpeed = 6,
			m_averagePressure = 7,
			m_averageWindSpeed = 8,
			m_averageTempreture = 9,
			m_averageWaterVoporPressure = 10,
			m_averageRelativeHuminity = 11,
			m_sunshineDuration = 12,
			m_dailyMinimumPressure = 13,
			m_dailyMinimumTempreture = 14,
			m_dailyMaximumPressure = 15,
			m_dailyMaximumTempreture = 16,
			m_maximumWindSpeed = 17,
			m_directionOfMaximumWindSpeed = 18,
			m_dailyMaximumRelativeHuminity = 19
		};
		*/
		//constructor
		/*
		StandardHistoricalRecordUnit(
			unsigned int StationId,
			unsigned int Year,
			unsigned int Month,
			unsigned int Day,
			unsigned int PrecipitationFrom20OClockTo20OClock,
			unsigned int LocalMaximunWindSpeed,
			unsigned int DirectionOfLocalMaximunWindSpeed,
			unsigned int AveragePressure,
			unsigned int AverageWindSpeed,
			unsigned int AverageTempreture,
			unsigned int AverageWaterVoporPressure,
			unsigned int AverageRelativeHuminity,
			unsigned int SunshineDuration,
			unsigned int DailyMinimumPressure,
			unsigned int DailyMinimumTempreture,
			unsigned int DailyMaximumPressure,
			unsigned int DailyMaximumTempreture,
			unsigned int MaximumWindSpeed,
			unsigned int DirectionOfMaximumWindSpeed,
			unsigned int DailyMaximumRelativeHuminity):
			m_StationId(StationId),
			m_Year(Year),
			m_Month(Month),
			m_Day(Day),
			m_PrecipitationFrom20OClockTo20OClock(PrecipitationFrom20OClockTo20OClock),
			m_LocalMaximunWindSpeed(LocalMaximunWindSpeed),
			m_DirectionOfLocalMaximunWindSpeed(DirectionOfLocalMaximunWindSpeed),
			m_AveragePressure(AveragePressure),
			m_AverageWindSpeed(AverageWindSpeed),
			m_AverageTempreture(AverageTempreture),
			m_AverageWaterVoporPressure(AverageWaterVoporPressure),
			m_AverageRelativeHuminity(AverageRelativeHuminity),
			m_SunshineDuration(SunshineDuration),
			m_DailyMinimumPressure(DailyMinimumPressure),
			m_DailyMinimumTempreture(DailyMinimumTempreture),
			m_DailyMaximumPressure(DailyMaximumPressure),
			m_DailyMaximumTempreture(DailyMaximumTempreture),
			m_MaximumWindSpeed(MaximumWindSpeed),
			m_DirectionOfMaximumWindSpeed(DirectionOfMaximumWindSpeed),
			m_DailyMaximumRelativeHuminity(DailyMaximumRelativeHuminity)
		{};
		*/
		StandardHistoricalRecordUnit(std::vector<std::string> lineRecord);

		std::vector<unsigned int> GetRecord() const;
		void SetRecord(std::vector<unsigned int> record);


};

class SimpleHistoricalRecordUnit
{
	Date					m_date;
	std::vector<double>		m_record;

public:
	//constructor, destructor, copy operator and assignment operator generated by defaut value
	SimpleHistoricalRecordUnit(std::vector<std::string>);

	//getter and setter 
	Date GetDate() const;
	void SetDate(const Date & Date);

	unsigned int GetYear() const;
	void SetYear(const unsigned int & Year);

	unsigned int GetMonth() const;
	void SetMonth(const unsigned int & Month);

	unsigned int GetDay() const;
	void SetDay(const unsigned int & Day);

	double GetPrecipitationFrom20OClockTo20OClock() const;
	void SetPrecipitationFrom20OClockTo20OClock(const double & PrecipitationFrom20OClockTo20OClock);

	double GetDailyMaximunTempreture() const;
	void SetDailyMaximunTempreture(const double & DailyMaximunTempreture);

	double GetDailyMinimunTempreture() const;
	void SetDailyMinimunTempreture(const double & DailyMinimunTempreture);

	std::vector<double> GetRecord() const;

};
/*
typedef std::vector<SimpleHistoricalRecordUnit> HistoricalRecord;

class SimpleHistoricalRecord
{
	std::string m_cityName;
	HistoricalRecord m_historicalRecord;

public:
	SimpleHistoricalRecord(std::string cityName);

	std::string GetCityName() const;
	HistoricalRecord GetHistoricalRecord() const;
};
*/

#endif 
//!HISTORICALDATA_H